-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module ChatAPI.Query exposing (..)

import ChatAPI.InputObject
import ChatAPI.Interface
import ChatAPI.Object
import ChatAPI.Scalar
import ChatAPI.ScalarCodecs
import ChatAPI.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias MessageRequiredArguments =
    { content : String }


message :
    MessageRequiredArguments
    -> SelectionSet decodesTo ChatAPI.Object.Message
    -> SelectionSet decodesTo RootQuery
message requiredArgs object_ =
    Object.selectionForCompositeField "message" [ Argument.required "content" requiredArgs.content Encode.string ] object_ identity


messages :
    SelectionSet decodesTo ChatAPI.Object.Message
    -> SelectionSet (List decodesTo) RootQuery
messages object_ =
    Object.selectionForCompositeField "messages" [] object_ (identity >> Decode.list)
